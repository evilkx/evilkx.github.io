<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VILOGY</title>
  
  <subtitle>Tech, Science, Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vilogy.citvilab.cn/"/>
  <updated>2020-04-18T01:39:35.785Z</updated>
  <id>http://vilogy.citvilab.cn/</id>
  
  <author>
    <name>vilogy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dijkstra算法</title>
    <link href="http://vilogy.citvilab.cn/2020/04/18/Dijkstra%E7%AE%97%E6%B3%95/"/>
    <id>http://vilogy.citvilab.cn/2020/04/18/Dijkstra算法/</id>
    <published>2020-04-18T01:39:01.000Z</published>
    <updated>2020-04-18T01:39:35.785Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Algorithm" scheme="http://vilogy.citvilab.cn/categories/Algorithm/"/>
    
    
      <category term="Dijkstra" scheme="http://vilogy.citvilab.cn/tags/Dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法</title>
    <link href="http://vilogy.citvilab.cn/2020/04/18/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    <id>http://vilogy.citvilab.cn/2020/04/18/遗传算法/</id>
    <published>2020-04-18T01:38:29.000Z</published>
    <updated>2020-04-18T01:40:07.565Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Algorithm" scheme="http://vilogy.citvilab.cn/categories/Algorithm/"/>
    
    
      <category term="遗传算法" scheme="http://vilogy.citvilab.cn/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>A*Search</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/A-Search/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/A-Search/</id>
    <published>2020-04-17T14:50:50.000Z</published>
    <updated>2020-04-18T01:41:01.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-搜索算法（A-star-Search）"><a href="#A-搜索算法（A-star-Search）" class="headerlink" title="A*搜索算法（A-star Search）"></a>A*搜索算法（A-star Search）</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>A<em>搜索算法是一种在图形平面上，有多个节点的路径，求出最低通过成本的算法，一种用于寻找有效路径的算法。常用于游戏中NPC的移动计算，或网络游戏的BOT的移动计算上。这种以估值来决定搜索优先级的方式，也成为<em>*启发式搜索</em></em>。</p><p>该算法综合最良优先搜索和<a href="https://zh.wikipedia.org/wiki/Dijkstra算法" target="_blank" rel="noopener">Dijkstra算法</a>的优点：在进行启发式搜索提高算法效率的同时，可以保证找到一条最优路径（基于评估函数）。</p><p>A*搜索算法的演示图：</p><p><img src="D:\test\source\images\typora_srcs\SearchAlgorithm\Astar_progress_animation.gif" alt="Astar_progress_animation"></p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>以一个简单的寻路场景为例</p><p><img src="D:\test\source\images\typora_srcs\SearchAlgorithm\640.png" alt="640" style="zoom: 67%;"></p><p>游戏场景是7x5大小的迷宫，由小方格组成，绿格是起点，红格是终点，中间三个蓝色格子代表墙。</p><p>游戏规则是从起点开始，每一步只能向上下左右移动一格，且不能穿越墙壁。如何用最少的步数到达终点？</p><hr><p>引入两个集合和一个公式：<br>$$<br>[OpenList], [CloseList], F = G + H<br>$$<br>OpenList和CloseList都是存储格子的集合，其中OpenList存储可到达的格子，CloseList存储已到达的格子。</p><p>公式 F = G + H 是对格子价值的评估。其中<strong>G</strong>代表从起点到当前格的成本，也就是走了多少步。<strong>H</strong>代表从当前格走到目标格的距离，也就是不考虑障碍的情况下，离目标还有多远。<strong>F</strong>则是对G和H的综合评估。显然我们应尽量选择步数少，离目标更近的格子。所以<strong>F</strong>的值越小越好。</p><hr><h4 id="一次局部搜索"><a href="#一次局部搜索" class="headerlink" title="一次局部搜索"></a>一次局部搜索</h4><ol><li>将起点Node(1, 2)放入OpenList</li><li>找出OpenList中F值最小的方格，即唯一方格Node(1, 2)作为当前方格，并把当前格移出OpenList，放入CloseList。代表这个格子已经到达并检查过了。</li><li>找出当前格上下左右所有可到达的格子，看它们是否在OpenList当中。如果不在，加入OpenList，计算出相应的G、H、F值，并把当前格子作为它们的“父节点”。</li></ol><p><img src="D:\test\source\images\typora_srcs\SearchAlgorithm\A-star-round1.png" alt="A-star-round1" style="zoom: 67%;"></p><p><strong>图中，每个格子的左下方数字是G，右下方是H，左上方是F。</strong></p><h4 id="多次局部搜索"><a href="#多次局部搜索" class="headerlink" title="多次局部搜索"></a>多次局部搜索</h4><p>继续重复局部搜索的步骤，直到找到终点为止。</p><ol><li><p>找出OpenList中F值最小的方格点，即Node(2, 2)作为当前方格，并把当前格移出OpenList，放入CloseList。代表这个格子已经到达并检查过了。</p></li><li><p>找出当前格上下左右所有可到达的格子，看它们是否在OpenList当中。如果不在，加入OpenList，计算出相应的G、H、F值，并把当前格子作为它们的“父节点”。</p><p>……</p><p>当终点方格出现在OpenList中，寻路结束。</p><p>终点方格–&gt;父节点–&gt;父父节点–&gt;…–&gt;起点，如此回溯便能得到一条路径。（格上数字表示F）    </p><p><img src="D:\test\source\images\typora_srcs\SearchAlgorithm\A-star-end.png" alt="A-star-end" style="zoom:67%;"></p></li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">aStarSearch</span><span class="params">(Node start, Node end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 把起点加入 open list  </span></span><br><span class="line">    openList.add(start);</span><br><span class="line">    <span class="comment">//主循环，每一轮检查一个当前方格节点</span></span><br><span class="line">    <span class="keyword">while</span> (openList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 在OpenList中查找 F值最小的节点作为当前方格节点</span></span><br><span class="line">        Node current = findMinNode();</span><br><span class="line">        <span class="comment">// 当前方格节点从open list中移除</span></span><br><span class="line">        openList.remove(current);</span><br><span class="line">        <span class="comment">// 当前方格节点进入 close list</span></span><br><span class="line">        closeList.add(current);</span><br><span class="line">        <span class="comment">// 找到所有邻近节点</span></span><br><span class="line">        List&lt;Node&gt; neighbors = findNeighbors(current);</span><br><span class="line">        <span class="keyword">for</span> (Node node : neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!openList.contains(node)) &#123;</span><br><span class="line">                <span class="comment">//邻近节点不在OpenList中，标记父亲、G、H、F，并放入OpenList</span></span><br><span class="line">                markAndInvolve(current, end, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果终点在OpenList中，直接返回终点格子</span></span><br><span class="line">        <span class="keyword">if</span> (find(openList, end) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> find(openList, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//OpenList用尽，仍然找不到终点，说明终点不可到达，返回空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-搜索算法（A-star-Search）&quot;&gt;&lt;a href=&quot;#A-搜索算法（A-star-Search）&quot; class=&quot;headerlink&quot; title=&quot;A*搜索算法（A-star Search）&quot;&gt;&lt;/a&gt;A*搜索算法（A-star Search）&lt;/
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://vilogy.citvilab.cn/categories/Algorithm/"/>
    
    
      <category term="A-star" scheme="http://vilogy.citvilab.cn/tags/A-star/"/>
    
  </entry>
  
  <entry>
    <title>A*Search</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/Algorithm/A-Search/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/Algorithm/A-Search/</id>
    <published>2020-04-17T14:50:50.000Z</published>
    <updated>2020-04-18T01:36:27.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-搜索算法（A-star-Search）"><a href="#A-搜索算法（A-star-Search）" class="headerlink" title="A*搜索算法（A-star Search）"></a>A*搜索算法（A-star Search）</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>A<em>搜索算法是一种在图形平面上，有多个节点的路径，求出最低通过成本的算法，一种用于寻找有效路径的算法。常用于游戏中NPC的移动计算，或网络游戏的BOT的移动计算上。这种以估值来决定搜索优先级的方式，也成为<em>*启发式搜索</em></em>。</p><p>该算法综合最良优先搜索和<a href="https://zh.wikipedia.org/wiki/Dijkstra算法" target="_blank" rel="noopener">Dijkstra算法</a>的优点：在进行启发式搜索提高算法效率的同时，可以保证找到一条最优路径（基于评估函数）。</p><p>A*搜索算法的演示图：</p><p><img src="D:\test\source\images\typora_srcs\SearchAlgorithm\Astar_progress_animation.gif" alt="Astar_progress_animation"></p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>以一个简单的寻路场景为例</p><p><img src="D:\test\source\images\typora_srcs\SearchAlgorithm\640.png" alt="640" style="zoom: 67%;"></p><p>游戏场景是7x5大小的迷宫，由小方格组成，绿格是起点，红格是终点，中间三个蓝色格子代表墙。</p><p>游戏规则是从起点开始，每一步只能向上下左右移动一格，且不能穿越墙壁。如何用最少的步数到达终点？</p><hr><p>引入两个集合和一个公式：<br>$$<br>[OpenList], [CloseList], F = G + H<br>$$<br>OpenList和CloseList都是存储格子的集合，其中OpenList存储可到达的格子，CloseList存储已到达的格子。</p><p>公式 F = G + H 是对格子价值的评估。其中<strong>G</strong>代表从起点到当前格的成本，也就是走了多少步。<strong>H</strong>代表从当前格走到目标格的距离，也就是不考虑障碍的情况下，离目标还有多远。<strong>F</strong>则是对G和H的综合评估。显然我们应尽量选择步数少，离目标更近的格子。所以<strong>F</strong>的值越小越好。</p><hr><h4 id="一次局部搜索"><a href="#一次局部搜索" class="headerlink" title="一次局部搜索"></a>一次局部搜索</h4><ol><li>将起点Node(1, 2)放入OpenList</li><li>找出OpenList中F值最小的方格，即唯一方格Node(1, 2)作为当前方格，并把当前格移出OpenList，放入CloseList。代表这个格子已经到达并检查过了。</li><li>找出当前格上下左右所有可到达的格子，看它们是否在OpenList当中。如果不在，加入OpenList，计算出相应的G、H、F值，并把当前格子作为它们的“父节点”。</li></ol><p><img src="D:\test\source\images\typora_srcs\SearchAlgorithm\A-star-round1.png" alt="A-star-round1" style="zoom: 67%;"></p><p><strong>图中，每个格子的左下方数字是G，右下方是H，左上方是F。</strong></p><h4 id="多次局部搜索"><a href="#多次局部搜索" class="headerlink" title="多次局部搜索"></a>多次局部搜索</h4><p>继续重复局部搜索的步骤，直到找到终点为止。</p><ol><li><p>找出OpenList中F值最小的方格点，即Node(2, 2)作为当前方格，并把当前格移出OpenList，放入CloseList。代表这个格子已经到达并检查过了。</p></li><li><p>找出当前格上下左右所有可到达的格子，看它们是否在OpenList当中。如果不在，加入OpenList，计算出相应的G、H、F值，并把当前格子作为它们的“父节点”。</p><p>……</p><p>当终点方格出现在OpenList中，寻路结束。</p><p>终点方格–&gt;父节点–&gt;父父节点–&gt;…–&gt;起点，如此回溯便能得到一条路径。（格上数字表示F）    </p><p><img src="D:\test\source\images\typora_srcs\SearchAlgorithm\A-star-end.png" alt="A-star-end" style="zoom:67%;"></p></li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">aStarSearch</span><span class="params">(Node start, Node end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 把起点加入 open list  </span></span><br><span class="line">    openList.add(start);</span><br><span class="line">    <span class="comment">//主循环，每一轮检查一个当前方格节点</span></span><br><span class="line">    <span class="keyword">while</span> (openList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 在OpenList中查找 F值最小的节点作为当前方格节点</span></span><br><span class="line">        Node current = findMinNode();</span><br><span class="line">        <span class="comment">// 当前方格节点从open list中移除</span></span><br><span class="line">        openList.remove(current);</span><br><span class="line">        <span class="comment">// 当前方格节点进入 close list</span></span><br><span class="line">        closeList.add(current);</span><br><span class="line">        <span class="comment">// 找到所有邻近节点</span></span><br><span class="line">        List&lt;Node&gt; neighbors = findNeighbors(current);</span><br><span class="line">        <span class="keyword">for</span> (Node node : neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!openList.contains(node)) &#123;</span><br><span class="line">                <span class="comment">//邻近节点不在OpenList中，标记父亲、G、H、F，并放入OpenList</span></span><br><span class="line">                markAndInvolve(current, end, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果终点在OpenList中，直接返回终点格子</span></span><br><span class="line">        <span class="keyword">if</span> (find(openList, end) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> find(openList, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//OpenList用尽，仍然找不到终点，说明终点不可到达，返回空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-搜索算法（A-star-Search）&quot;&gt;&lt;a href=&quot;#A-搜索算法（A-star-Search）&quot; class=&quot;headerlink&quot; title=&quot;A*搜索算法（A-star Search）&quot;&gt;&lt;/a&gt;A*搜索算法（A-star Search）&lt;/
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://vilogy.citvilab.cn/categories/Algorithm/"/>
    
    
      <category term="A-star" scheme="http://vilogy.citvilab.cn/tags/A-star/"/>
    
  </entry>
  
  <entry>
    <title>广度优先搜索(BFS)</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/Algorithm/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-BFS/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/Algorithm/广度优先搜索-BFS/</id>
    <published>2020-04-17T12:47:57.000Z</published>
    <updated>2020-04-17T14:46:40.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="广度优先搜索（Bread-First-Search）"><a href="#广度优先搜索（Bread-First-Search）" class="headerlink" title="广度优先搜索（Bread First Search）"></a>广度优先搜索（Bread First Search）</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>广度优先搜索算法也是图论中的一种经典算法，常应用于寻找一幅图中两顶点之间的<strong>最短</strong>路径，而非遍历整个图或树，这是DFS所没有的。二叉树的层序遍历，本质上也可以认为是广度优先遍历。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>广度优先搜索与DFS不同，它是一种<strong>“广泛撒网”</strong>的玩法。从起点开始，首先检索起点的可行候选点，并按先入先出（FIFO）的方法管理。即最先进入队列的候选点，最先进行检索可行候选点的操作，之后移除该候选点，并将该点的第二层候选点加入队列，依次将第一层的候选点全部检索完成后，队列中应该只有第二层候选点，且已按第一层候选点的先后顺序排列。依次执行，每次执行后，队列中仅存某一层的全部候选点，直到完成图或树的遍历，或者找到某一<strong>最短</strong>路径。</p><p>以树结构为例，广度优先搜索算法的执行流程为：</p><p>A – B C D – E F C D –… – E F H I J –..– K G L</p><p>其中为了详细展示队列的进出，我对B的进出队列进行了描述，B出队列同时EF进队，同理CD出战被下一层的候选点代替。此时队列中最早入队的是EF，继续搜索直到最后一层。</p><p><img src="https://vilogy.citvilab.cn/images/typora_srcs/SearchAlgorithm/DFS_tree.png" style="zoom:25%;"></p><p>以迷宫问题为例，由于是逐层执行，所以广度优先搜索具有寻找<strong>最短路径</strong>的优势。</p><p><img src="https://vilogy.citvilab.cn/images/typora_srcs/SearchAlgorithm/BFS_maze.png" style="zoom:25%;"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>由于候选点具有<strong>先入先出</strong>的特性，所以可以选择使用“队列”数据结构。同时定义一个<strong>布尔数组</strong>来存储所有顶点的遍历状态，顶点对应数组元素的初始值都是false，代表未遍历，遍历之后变为true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广度优先遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Graph graph, <span class="keyword">int</span> start, <span class="keyword">boolean</span>[] visited,LinkedList&lt;Integer&gt;queue)</span> </span>&#123;</span><br><span class="line">    queue.offer(start);    </span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">    <span class="keyword">int</span> front = queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(visited[front])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(graph.vertexes[front].data);</span><br><span class="line">        visited[front] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> index : graph.adj[front])&#123;</span><br><span class="line">            queue.offer(index);;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;广度优先搜索（Bread-First-Search）&quot;&gt;&lt;a href=&quot;#广度优先搜索（Bread-First-Search）&quot; class=&quot;headerlink&quot; title=&quot;广度优先搜索（Bread First Search）&quot;&gt;&lt;/a&gt;广度优先搜索（B
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://vilogy.citvilab.cn/categories/Algorithm/"/>
    
    
      <category term="BFS" scheme="http://vilogy.citvilab.cn/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>深度优先搜索(DFS)</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/Algorithm/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/Algorithm/深度优先搜索-DFS/</id>
    <published>2020-04-17T12:27:10.000Z</published>
    <updated>2020-04-17T14:47:06.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深度优先搜索（Depth-First-Search）"><a href="#深度优先搜索（Depth-First-Search）" class="headerlink" title="深度优先搜索（Depth First Search）"></a>深度优先搜索（Depth First Search）</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>深度优先搜索算法是图论中的一种经典算法，所谓深度优先，即尽可能深的搜索树的分支，多用于遍历或者搜索<strong>树</strong>和<strong>图</strong>。二叉树的前序、中序、后序遍历，本质上也可以认为是深度优先遍历。</p><p>将图与迷宫问题等价是一种思考搜索过程的有效方式，用<strong>迷宫</strong>代替<strong>图</strong>、<strong>通道</strong>代替<strong>边</strong>、<strong>路口</strong>代替<strong>顶点</strong>。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>深度优先搜索是一种“一站到底”的玩法。从起点开始，任意选择一个方向出发，遇到路口时再任选一个方向继续……如此反复，当行至路之尽头时，“回溯”到上一个路口，换一个方向继续，如此反复直到完成整个结构的遍历或者找到出口为止。</p><p>以树结构为例，若要遍历整个树结构，其流程是：</p><p>A–B–E–K–&gt;B–F–&gt;B–&gt;A–C–H–G–&gt;H–&gt;C–&gt;A–D–I–&gt;D–J–L</p><p>其中 – 表示顺序遍历，–&gt;表示“回溯”</p><p><img src="https://vilogy.citvilab.cn/images/typora_srcs/SearchAlgorithm/DFS_tree.png" style="zoom: 25%;"></p><p>以迷宫为例，如要寻找一条起点S到终点G的一条路径，其流程为：</p><p>从S出发，行至第一个路口时，向下（任选）继续移动，行至第二个路口时，向左移动，异常，回溯至上一个路口，向右移动，到达终点。</p><p>可以看出DFS的一个缺点，不能找到最短路径</p><p><img src="https://vilogy.citvilab.cn/images/typora_srcs/SearchAlgorithm/DFS_maze_c.png" style="zoom: 25%;"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>深度优先搜索算法的核心在于“回溯”，可以有两种方式来实现：</p><ol><li>利用<strong>栈</strong>后入先出(LIFO)的特性</li><li>采用<strong>递归</strong>的方式（递归本身就是基于方法调用栈来实现）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深度优先遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Graph graph, <span class="keyword">int</span> start, <span class="keyword">boolean</span>[] visited)</span> </span>&#123;</span><br><span class="line">System.out.println(graph.vertexes[start].data);</span><br><span class="line">    visited[start] = <span class="keyword">true</span>;    </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> index : graph.adj[start])&#123;        </span><br><span class="line"><span class="keyword">if</span>(!visited[index])&#123;</span><br><span class="line">            dfs(graph, index, visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深度优先搜索（Depth-First-Search）&quot;&gt;&lt;a href=&quot;#深度优先搜索（Depth-First-Search）&quot; class=&quot;headerlink&quot; title=&quot;深度优先搜索（Depth First Search）&quot;&gt;&lt;/a&gt;深度优先搜索（D
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://vilogy.citvilab.cn/categories/Algorithm/"/>
    
    
      <category term="DFS" scheme="http://vilogy.citvilab.cn/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>移动最小二乘法(MLS)</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/Algorithm/MLS%E7%A7%BB%E5%8A%A8%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/Algorithm/MLS移动最小二乘法/</id>
    <published>2020-04-17T07:53:22.000Z</published>
    <updated>2020-04-17T14:59:22.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动最小二乘法（Moving-Least-Squares）"><a href="#移动最小二乘法（Moving-Least-Squares）" class="headerlink" title="移动最小二乘法（Moving Least Squares）"></a>移动最小二乘法（Moving Least Squares）</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;移动最小二乘法（Moving-Least-Squares）&quot;&gt;&lt;a href=&quot;#移动最小二乘法（Moving-Least-Squares）&quot; class=&quot;headerlink&quot; title=&quot;移动最小二乘法（Moving Least Squares）&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://vilogy.citvilab.cn/categories/Algorithm/"/>
    
    
      <category term="MLS" scheme="http://vilogy.citvilab.cn/tags/MLS/"/>
    
  </entry>
  
  <entry>
    <title>ImageJ</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/Tools/ImageJ/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/Tools/ImageJ/</id>
    <published>2020-04-17T06:16:09.000Z</published>
    <updated>2020-04-17T07:43:42.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ImageJ是什么</p><ul><li>官网：<a href="https://imagej.net/Welcome" target="_blank" rel="noopener">https://imagej.net/Welcome</a></li><li>fiji开发版：<a href="https://imagej.net/Fiji/Downloads" target="_blank" rel="noopener">https://imagej.net/Fiji/Downloads</a></li><li>知乎专栏：<a href="https://zhuanlan.zhihu.com/c_1069243926476673024" target="_blank" rel="noopener">ImageJ实用教程</a> <a href="https://zhuanlan.zhihu.com/c_1101076075773370368" target="_blank" rel="noopener">ImageJ开发教程</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>win</li><li>linux</li></ul><p>解压即可</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="图片测身高流程"><a href="#图片测身高流程" class="headerlink" title="图片测身高流程"></a>图片测身高流程</h3><p>ImageJ的简单应用，找一个参照物，修改比例尺，可实现简单的图片内长度测量。</p><p>测量姚明的身高，已知标准篮球的直径是24.6cm，Analyze–&gt;Set Scale，键入0.264。</p><p>再选球员两脚脚跟的连接线的中电做底，到头部连线，Measure即得球员身高。</p><h3 id="捏脸"><a href="#捏脸" class="headerlink" title="捏脸"></a>捏脸</h3><p><strong>移动最小二乘法(Moving Least Squares, MLS)</strong></p><p>使用插件：<strong>Plugin -&gt; Transform -&gt; Interactive Moving Least Squares</strong></p><h3 id="测心率"><a href="#测心率" class="headerlink" title="测心率"></a>测心率</h3><p><a href="https://zhuanlan.zhihu.com/p/59386426" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/59386426</a></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>宏编程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;ImageJ是什么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://imagej.net/Welcome&quot; target=
      
    
    </summary>
    
      <category term="Tools" scheme="http://vilogy.citvilab.cn/categories/Tools/"/>
    
    
      <category term="ImageProcessing" scheme="http://vilogy.citvilab.cn/tags/ImageProcessing/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/RaspberryPi/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/RaspberryPi/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:00:29.673Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="RaspberryPi" scheme="http://vilogy.citvilab.cn/categories/RaspberryPi/"/>
    
    
      <category term="RaspberryPi" scheme="http://vilogy.citvilab.cn/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/OperatingSystem/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/OperatingSystem/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:05:01.536Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="OperatingSystem" scheme="http://vilogy.citvilab.cn/categories/OperatingSystem/"/>
    
    
      <category term="OperatingSystem" scheme="http://vilogy.citvilab.cn/tags/OperatingSystem/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/Arduino/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/Arduino/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:01:04.385Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Arduino" scheme="http://vilogy.citvilab.cn/categories/Arduino/"/>
    
    
      <category term="Arduino" scheme="http://vilogy.citvilab.cn/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/CVM/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/CVM/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:03:01.993Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CVM" scheme="http://vilogy.citvilab.cn/categories/CVM/"/>
    
    
      <category term="CVM" scheme="http://vilogy.citvilab.cn/tags/CVM/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/CyberSecurity/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/CyberSecurity/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:03:34.552Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="CyberSecurity" scheme="http://vilogy.citvilab.cn/categories/CyberSecurity/"/>
    
    
      <category term="CyberSecurity" scheme="http://vilogy.citvilab.cn/tags/CyberSecurity/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/C++/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/C++/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:02:45.376Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="C++" scheme="http://vilogy.citvilab.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://vilogy.citvilab.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/BCI/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/BCI/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:02:06.075Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="BCI" scheme="http://vilogy.citvilab.cn/categories/BCI/"/>
    
    
      <category term="BCI" scheme="http://vilogy.citvilab.cn/tags/BCI/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/C/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/C/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:02:25.645Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="C" scheme="http://vilogy.citvilab.cn/categories/C/"/>
    
    
      <category term="C" scheme="http://vilogy.citvilab.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/Linux/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/Linux/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:04:09.146Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Linux" scheme="http://vilogy.citvilab.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://vilogy.citvilab.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/K210/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/K210/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:01:35.015Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="K210" scheme="http://vilogy.citvilab.cn/categories/K210/"/>
    
    
      <category term="K210" scheme="http://vilogy.citvilab.cn/tags/K210/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/OpenCV/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/OpenCV/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:04:32.817Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="OpenCV" scheme="http://vilogy.citvilab.cn/categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="http://vilogy.citvilab.cn/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://vilogy.citvilab.cn/2020/04/17/Python/test/"/>
    <id>http://vilogy.citvilab.cn/2020/04/17/Python/test/</id>
    <published>2020-04-17T04:58:58.000Z</published>
    <updated>2020-04-17T05:05:25.053Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Python" scheme="http://vilogy.citvilab.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://vilogy.citvilab.cn/tags/Python/"/>
    
  </entry>
  
</feed>
